@page "/purchases"
@using IT_Asset_ManagementClient.Models
@using PurchaseModel = IT_Asset_ManagementClient.Models.Purchase
@inject PurchasesService PurchasesService
@inject AssetMasterService AssetService
@inject UserService UserService

<h3>Purchases</h3>
<div class="mb-2"><strong>User:</strong> @currentUser</div>
<div class="mb-3">
    <input class="form-control" placeholder="Search by asset, invoice, or remarks..." @bind="searchText" />
</div>

<h4>Add New Purchase</h4>
<EditForm Model="@newPurchase" OnValidSubmit="AddPurchase">
    <!-- form fields unchanged -->
</EditForm>

<hr />

<h4>All Purchases</h4>
<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>Date</th>
            <th>Asset Name</th>
            <th>Invoice No</th>
            <th>Qty</th>
            <th>Rate</th>
            <th>Damaged</th>
            <th>Damaged Date</th>
            <th>Remarks</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (PurchaseModel p in FilteredPurchases)
        {
            <tr>
                <td>@p.Date.ToShortDateString()</td>
                <td>@assets.FirstOrDefault(a => a.Id == p.AssetId)?.Name</td>
                <td>@p.InvoiceNo</td>
                <td>@p.Quantity</td>
                <td>@p.Rate</td>
                <td>@(p.Damaged ? "Yes" : "No")</td>
                <td>@p.DamagedDate?.ToShortDateString()</td>
                <td>@p.Remarks</td>
                <td>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeletePurchase(p)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    string searchText = "";
    List<PurchaseModel> purchases = new();
    List<AssetMaster> assets = new();
    PurchasesCreateDto newPurchase = new() { Date = DateTime.Today };
    string? currentUser;

    IEnumerable<PurchaseModel> FilteredPurchases =>
        string.IsNullOrWhiteSpace(searchText)
            ? purchases
            : purchases.Where(p =>
                (assets.FirstOrDefault(a => a.Id == p.AssetId)?.Name?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false)
                || (p.InvoiceNo?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false)
                || (p.Remarks?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false)
            );

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetUserAsync();
        assets = await AssetService.GetAssetsAsync() ?? new();
        purchases = await PurchasesService.GetPurchasesAsync() ?? new();
    }

    async Task AddPurchase()
    {
        var result = await PurchasesService.CreatePurchaseAsync(newPurchase);
        if (result != null)
        {
            purchases.Add(result);
            newPurchase = new() { Date = DateTime.Today };
        }
    }

    async Task DeletePurchase(PurchaseModel p)
    {
        if (await PurchasesService.DeletePurchaseAsync(p.Id))
        {
            purchases.Remove(p);
        }
    }
}
