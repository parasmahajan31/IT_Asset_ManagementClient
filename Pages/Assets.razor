@page "/assets"
@using IT_Asset_ManagementClient.Models
@using Microsoft.AspNetCore.Components.Forms
@inject AssetMasterService AssetService
@inject UserService UserSvc

<h3>Asset Master</h3>
<div class="mb-2"><strong>User:</strong> @currentUser</div>

@if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">@error</div>
}

<div class="mb-3">
    <input class="form-control" placeholder="Search assets..." @bind="searchText" />
</div>

<h4>Add New Asset</h4>
<EditForm Model="@newAsset" OnValidSubmit="AddAsset">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mb-2">
        <div class="col-md-2">
            <label>Name</label>
            <InputText class="form-control" @bind-Value="newAsset.Name" />
        </div>
        <div class="col-md-2">
            <label>Product</label>
            <InputText class="form-control" @bind-Value="newAsset.Product" />
        </div>
        <div class="col-md-2">
            <label>Brand</label>
            <InputText class="form-control" @bind-Value="newAsset.Brand" />
        </div>
        <div class="col-md-2">
            <label>Model</label>
            <InputText class="form-control" @bind-Value="newAsset.Model" />
        </div>
        <div class="col-md-2">
            <label>Warranty</label>
            <InputText class="form-control" @bind-Value="newAsset.Warranty" />
        </div>
        <div class="col-md-2">
            <label>Product Type</label>
            <InputText class="form-control" @bind-Value="newAsset.ProductType" />
        </div>
        <div class="col-md-4 d-flex align-items-end">
            <button type="submit" class="btn btn-success">Add Asset</button>
        </div>
    </div>
</EditForm>

<hr />

<h4>All Assets</h4>
<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>Name</th>
            <th>Product</th>
            <th>Brand</th>
            <th>Model</th>
            <th>Warranty</th>
            <th>Product Type</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var asset in FilteredAssets)
        {
            <tr>
                <td>@asset.Name</td>
                <td>@asset.Product</td>
                <td>@asset.Brand</td>
                <td>@asset.Model</td>
                <td>@asset.Warranty</td>
                <td>@asset.ProductType</td>
                <td>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteAsset(asset)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    string searchText = string.Empty;
    List<AssetMaster> assets = new();
    AssetMasterCreateDto newAsset = new();
    string? currentUser;
    string? error;

    IEnumerable<AssetMaster> FilteredAssets =>
        string.IsNullOrWhiteSpace(searchText)
            ? assets
            : assets.Where(a =>
                (a.Name?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (a.Product?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (a.Brand?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (a.Model?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (a.Warranty?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (a.ProductType?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false));

    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentUser = await UserSvc.GetUserAsync();
            await LoadAssets();
        }
        catch (Exception ex) { error = ex.Message; }
    }

    async Task LoadAssets()
    {
        try
        {
            assets = await AssetService.GetAssetsAsync() ?? new();
        }
        catch (Exception ex) { error = ex.Message; }
    }

    async Task AddAsset()
    {
        try
        {
            var created = await AssetService.CreateAssetAsync(newAsset);
            if (created is not null)
            {
                newAsset = new AssetMasterCreateDto(); // reset form
                await LoadAssets();                    // refresh authoritative list
            }
        }
        catch (Exception ex) { error = ex.Message; }
    }

    async Task DeleteAsset(AssetMaster asset)
    {
        try
        {
            if (await AssetService.DeleteAssetAsync(asset.Id))
            {
                await LoadAssets(); // refresh after delete
            }
        }
        catch (Exception ex) { error = ex.Message; }
    }
}
