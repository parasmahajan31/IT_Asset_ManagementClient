@page "/assets"
@using IT_Asset_ManagementClient.Models
@using Microsoft.AspNetCore.Components.Forms
@inject AssetMasterService AssetService

<h3>Asset Master</h3>

<div class="mb-3">
    <input class="form-control" placeholder="Search by name, dept, or user..." @bind="searchText" />
</div>

<h4>Add New Asset</h4>
<EditForm Model="@newAsset" OnValidSubmit="AddAsset">
    <div class="row mb-2">
        <div class="col-md-2">
            <label>Name</label>
            <InputText class="form-control" @bind-Value="newAsset.Name" />
        </div>
        <div class="col-md-2">
            <label>Dept</label>
            <InputText class="form-control" @bind-Value="newAsset.Dept" />
        </div>
        <div class="col-md-2">
            <label>Product</label>
            <InputText class="form-control" @bind-Value="newAsset.Product" />
        </div>
        <div class="col-md-2">
            <label>Brand</label>
            <InputText class="form-control" @bind-Value="newAsset.Brand" />
        </div>
        <div class="col-md-2">
            <label>Model</label>
            <InputText class="form-control" @bind-Value="newAsset.Model" />
        </div>
        <div class="col-md-2">
            <label>Warranty</label>
            <InputText class="form-control" @bind-Value="newAsset.Warranty" />
        </div>
    </div>
    <div class="row mb-2">
        <div class="col-md-2">
            <label>Condition</label>
            <InputText class="form-control" @bind-Value="newAsset.Condition" />
        </div>
        <div class="col-md-2">
            <label>User</label>
            <InputText class="form-control" @bind-Value="newAsset.User" />
        </div>
        <div class="col-md-2">
            <label>Department</label>
            <InputText class="form-control" @bind-Value="newAsset.Department" />
        </div>
        <div class="col-md-2 d-flex flex-column justify-content-center">
            <div class="form-check mb-1">
                <InputCheckbox class="form-check-input" @bind-Value="newAsset.Damaged" id="assetDamagedCheck" />
                <label class="form-check-label ms-2" for="assetDamagedCheck">Damaged</label>
            </div>
            @if (newAsset.Damaged)
            {
                <div>
                    <label class="form-label mb-0 mt-1">Damaged Date</label>
                    <InputDate class="form-control" @bind-Value="newAsset.DamagedDate" />
                </div>
            }
        </div>
        <div class="col-md-4 d-flex align-items-end">
            <button type="submit" class="btn btn-success">Add Asset</button>
        </div>
    </div>
</EditForm>

<hr />

<h4>All Assets</h4>
<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>Name</th>
            <th>Dept</th>
            <th>Product</th>
            <th>Brand</th>
            <th>Model</th>
            <th>Warranty</th>
            <th>Condition</th>
            <th>User</th>
            <th>Department</th>
            <th>Damaged</th>
            <th>Damaged Date</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var asset in FilteredAssets)
        {
            <tr>
                <td>@asset.Name</td>
                <td>@asset.Dept</td>
                <td>@asset.Product</td>
                <td>@asset.Brand</td>
                <td>@asset.Model</td>
                <td>@asset.Warranty</td>
                <td>@asset.Condition</td>
                <td>@asset.User</td>
                <td>@asset.Department</td>
                <td>@(asset.Damaged ? "Yes" : "No")</td>
                <td>@asset.DamagedDate?.ToShortDateString()</td>
                <td>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteAsset(asset)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    string searchText = "";
    List<AssetMaster> assets = new();
    AssetMasterCreateDto newAsset = new();

    IEnumerable<AssetMaster> FilteredAssets =>
        string.IsNullOrWhiteSpace(searchText)
        ? assets
        : assets.Where(a =>
            (a.Name?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false)
            || (a.Dept?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false)
            || (a.User?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false)
        );

    protected override async Task OnInitializedAsync()
    {
        await LoadAssets();
    }

    async Task LoadAssets()
    {
        assets = await AssetService.GetAssetsAsync() ?? new List<AssetMaster>();
    }

    async Task AddAsset()
    {
        var result = await AssetService.CreateAssetAsync(newAsset);
        if (result != null)
        {
            assets.Add(result);
            newAsset = new AssetMasterCreateDto();
        }
    }

    async Task DeleteAsset(AssetMaster asset)
    {
        if (await AssetService.DeleteAssetAsync(asset.Id))
        {
            assets.Remove(asset);
        }
    }
}
